.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "H.dom"                         # domain of allocation sites
.include "V.dom"                         # domain of variables
.include "F.dom"


relH(h:H) input
relT(t:T) input
ThrowMH(m:M,h:H) input                   # The exception object h escapes Method m.
CatchVH(v:V,h:H) input                   # Variable v which is the formal parameter of some catch handler, points-to exception object h.
ExceptionType(t:T) input                 # Type t is an exception type
HT(h:H,t:T) input                        # Allocation site h as Type t
entryPtM(m:M) input                      # Entry point methods of the assembly.

Caught(t:T,h:H) printtuples              # h is an exception object of Type t that is caught somewhere within the application
Escaping(t:T,h:H) printtuples            # h is an exception object of Type t that is escaping from the application



HFHO(h1:H,f:F,h2:H) input
VHO(v:V,h:H)  input
reachableM(m:M) input
MAlloc(m:M,v:V,h:H) input

ExcObject(h:H) printtuples
VExc(h:H) printtuples
RAExc(h:H) printtuples
Unk(h:H) printtuples
Wrap(h1:H,f:F,h2:H) printtuples

# Rules
# Escaping(t,h) :- ThrowMH(m,h), HT(h,t), ExceptionType(t), entryPtM(m).
Escaping(t,h) :- ThrowMH(m,h), HT(h,t), ExceptionType(t).
Caught(t,h) :- CatchVH(v,h), HT(h,t), ExceptionType(t), !Escaping(t,h).



ExcObject(h) :- HT(h,t), ExceptionType(t).
VExc(h) :- VHO(v,h), HT(h,t), ExceptionType(t).
RAExc(h) :- reachableM(m), MAlloc(m,v,h), HT(h,t), ExceptionType(t).
Unk(h) :- VExc(h), !Escaping(t,h), HT(h,t), ExceptionType(t).
Wrap(h1,f,h2) :- HFHO(h1,f,h2), HT(h1,t1), ExceptionType(t1), HT(h2,t2), ExceptionType(t2).



.include "relH.datalog"
.include "relT.datalog"
.include "ThrowMH.datalog"
.include "CatchVH.datalog"
.include "ExceptionType.datalog"
.include "HT.datalog"
.include "entryPtM.datalog"
.include "VHO.datalog"
.include "reachableM.datalog"
.include "MAlloc.datalog"
.include "HFHO.datalog"
