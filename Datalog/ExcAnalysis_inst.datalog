.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "I.dom"                         # domain of invoke statements
.include "H.dom"                         # domain of allocation sites
.include "V.dom"                         # domain of variables
.include "P.dom"                         # domain of program points
.include "EH.dom"                        # domain of exception handlers
.include "N.dom"                         # domain of integer location values

############
# Relations
############

relV(v:V) input
relH(h:H) input
HT(h:H,t:T) input                        # Allocation site h allocates an object of Type t
VarEH(eh:EH,v:V)  input                  # ExceptionHandler eh has the formal paramter as Variable v
ThrowPV(m:M,p:P,v:V)  input              # Instruction p of Method m throws Variable v
PI(p:P,i:I) input                        # Connects program points that are invoke statements to corresponding entries in domI
FinalEH(eh:EH,t:T,p:P) input             # ExceptionHandler eh catches an exception of Type t thrown at Program point p.
EscapeMTP(m:M,t:T,p:P) input             # Exception of type t if thrown at Program Point p, escapes Method m.
VHO(v:V,h:H)  input                      # Variable v may point to AllocSite h
CallAt(m:M,p:P,mcallee:M) input
ThrowMH(m:M,h:H) input                   # The exception object h escapes Method m.
CatchVH(v:V,h:H) input                   # Variable v which is the formal parameter of some catch handler, points-to exception object h.
ExceptionType(t:T) input                 # Type t is an exception type
entryPtM(m:M) input                      # Entry point methods of the assembly.
ILoc(i:I,n:N) input
LinkedEx(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T) input
ExceptionObj(h:H) input
WrapsEx(h1:H,h2:H) input
SharesFld(h1:H,h2:H) input



########################
#Instrumented Relations
########################

ThrowMH_i1(m:M,h:H,p:P,mcallee:M,t:T) printtuples
ThrowMH_i2(m2:M,h:H,m1:M,v1:V,t:T,v2:V) printtuples
ThrowMH_i3(m2:M,h2:H,m1:M,v1:V,t1:T,h1:H,v2:V,t2:T) printtuples
ThrowMH_i4(m2:M,h2:H,m1:M,v1:V,t1:T,h1:H,v2:V,t2:T) printtuples
CatchVH_i1(v:V,h:H,m:M,p:P,mcallee:M,t:T,eh:EH) printtuples
Escaping_i1(t:T,h:H,m:M) printtuples
FInject(m:M,n:N,mcallee:M,t:T) printtuples
PNMap(p:P,n:N) printtuples



##################
# Argument Counts
##################

# ARG_COUNT ThrowMH 2
# ARG_COUNT Escaping 2
# ARG_COUNT CatchVH 2



############################
# Instrumented Constraints
############################

# Information for fault injection
FInject(m,n,mcallee,t) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), EscapeMTP(m,t,p), PI(p,i), ILoc(i,n).
PNMap(p,n) :- CallAt(m,p,mcallee), PI(p,i), ILoc(i,n).

# Propagating exception points-to
ThrowMH_i1(m,h,p,mcallee,t) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), EscapeMTP(m,t,p).
ThrowMH_i2(m2,h,m1,v1,t,v2) :- CatchVH(v1,h), LinkedEx(m1,v1,t,m2,v2,t), VHO(v2,h), ExceptionObj(h), HT(h,t).
ThrowMH_i3(m2,h2,m1,v1,t1,h1,v2,t2) :- CatchVH(v1,h1), LinkedEx(m1,v1,t1,m2,v2,t2), VHO(v2,h2), WrapsEx(h1,h2), HT(h1,t1), HT(h2,t2).
ThrowMH_i4(m2,h2,m1,v1,t1,h1,v2,t2) :- CatchVH(v1,h1), LinkedEx(m1,v1,t1,m2,v2,t2), VHO(v2,h2), SharesFld(h1,h2), HT(h1,t1), HT(h2,t2).
CatchVH_i1(v,h,m,p,mcallee,t,eh) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), FinalEH(eh,t,p), VarEH(eh,v).
Escaping_i1(t,h,m) :- ThrowMH(m,h), HT(h,t), ExceptionType(t), entryPtM(m).



.include "relV.datalog"
.include "relH.datalog"
.include "HT.datalog"
.include "VarEH.datalog"
.include "ThrowPV.datalog"
.include "PI.datalog"
.include "FinalEH.datalog"
.include "EscapeMTP.datalog"
.include "VHO.datalog"
.include "CallAt.datalog"
.include "ThrowMH.datalog"
.include "CatchVH.datalog"
.include "ExceptionType.datalog"
.include "entryPtM.datalog"
.include "ILoc.datalog"
.include "LinkedEx.datalog"
.include "ExceptionObj.datalog"
.include "WrapsEx.datalog"
.include "SharesFld.datalog"
