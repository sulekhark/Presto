.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "I.dom"                         # domain of invoke statements
.include "H.dom"                         # domain of allocation sites
.include "V.dom"                         # domain of variables
.include "P.dom"                         # domain of program points
.include "EH.dom"                        # domain of exception handlers
.include "N.dom"                         # domain of integer location values

############
# Relations
############

relV(v:V) input
relH(h:H) input
HT(h:H,t:T) input                        # Allocation site h allocates an object of Type t
VarEH(eh:EH,v:V)  input                  # ExceptionHandler eh has the formal paramter as Variable v
ThrowPV(m:M,p:P,v:V)  input              # Instruction p of Method m throws Variable v
FinalEH(eh:EH,t:T,p:P) input             # ExceptionHandler eh catches an exception of Type t thrown at Program point p.
EscapeMTP(m:M,t:T,p:P) input             # Exception of type t if thrown at Program Point p, escapes Method m.
VHO(v:V,h:H)  input                      # Variable v may point to AllocSite h
CallAt(m:M,p:P,mcallee:M) input
ThrowMH(m:M,h:H) input                   # The exception object h escapes Method m.
CatchVH(v:V,h:H) input                   # Variable v which is the formal parameter of some catch handler, points-to exception object h.
ExceptionType(t:T) input                 # Type t is an exception type
entryPtM(m:M) input                      # Entry point methods of the assembly.
LinkedEx(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T) input
LinkMatch(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T) input
ExceptionObj(h:H) input
WrapsEx(h1:H,h2:H) input
SharesFld(h1:H,h2:H) input
Escaping(t:T,h:H) input
Caught(t:T,h:H) input
NestedEH(m:M,eh1:EH,eh2:EH) input        # In method m, exception handler eh1 nests exception handler eh2.
OutermostEH(m:M,eh:EH) input             # In method m, exception handler eh is not nested within any other exception handler.
EnclosingEH(m:M,eh:EH,p:P) input         # In method m, exception handler eh immediately encloses program point p that could potentially throw.
NoEnclose(m:M,p:P) input
FeasibleMTP(m:M,t:T,p:P) input
FeasibleEH(m:M,eh:EH) input


########################
#Instrumented Relations
########################

ThrowMH_i1(m:M,h:H,p:P,v:V,t:T) printtuples
ThrowMH_i2(m:M,h:H,p:P,mcallee:M,t:T) printtuples
LinkMatch_i1(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T,h:H) printtuples
LinkMatch_i2(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T,h1:H,h2:H) printtuples
CatchVH_i1(ehv:V,h:H,m:M,p:P,v:V,t:T,eh:EH) printtuples
CatchVH_i2(v:V,h:H,m:M,p:P,mcallee:M,t:T,eh:EH) printtuples
Escaping_i1(t:T,h:H,m:M) printtuples
REscaping_i1(t1:T,h1:H,t2:T,h2:H,m1:M,v1:V,m2:M,v2:V) printtuples
FeasibleMTP_i1(m:M,t:T,p:P) printtuples
FeasibleMTP_i2(m:M,t:T,p:P,eh:EH) printtuples
FeasibleEH_i1(m:M,eh:EH,v:V,h:H) printtuples
FeasibleEH_i2(m:M,eh:EH,v:V,h:H,eh1:EH) printtuples


##################
# Argument Counts
##################

# ARG_COUNT ThrowMH 2
# ARG_COUNT Escaping 2
# ARG_COUNT CatchVH 2
# ARG_COUNT LinkMatch 6
# ARG_COUNT REscaping 4 
# ARG_COUNT FeasibleMTP 3
# ARG_COUNT FeasibleEH 2



############################
# Instrumented Constraints
############################

# Propagating exception points-to
ThrowMH_i1(m,h,p,v,t) :- ThrowPV(m,p,v), VHO(v,h), HT(h,t), FeasibleMTP(m,t,p).
ThrowMH_i2(m,h,p,mcallee,t) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), FeasibleMTP(m,t,p).
LinkMatch_i1(m1,v1,t,m2,v2,t,h) :- CatchVH(v1,h), LinkedEx(m1,v1,t,m2,v2,t), VHO(v2,h), ExceptionObj(h), HT(h,t).
LinkMatch_i2(m1,v1,t1,m2,v2,t2,h1,h2) :- CatchVH(v1,h1), LinkedEx(m1,v1,t1,m2,v2,t2), VHO(v2,h2), WrapsEx(h2,h1), HT(h1,t1), HT(h2,t2).
CatchVH_i1(ehv,h,m,p,v,t,eh) :- ThrowPV(m,p,v), VHO(v,h), HT(h,t), FinalEH(eh,t,p), VarEH(eh,ehv).
CatchVH_i2(v,h,m,p,mcallee,t,eh) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), FinalEH(eh,t,p), VarEH(eh,v).
Escaping_i1(t,h,m) :- ThrowMH(m,h), HT(h,t), ExceptionType(t), entryPtM(m).
REscaping_i1(t1,h1,t2,h2,m1,v1,m2,v2) :- WrapsEx(h2,h1), Escaping(t2,h2), LinkMatch(m1,v1,t1,m2,v2,t2), HT(h1,t1).
FeasibleMTP_i1(m,t,p) :- EscapeMTP(m,t,p), NoEnclose(m,p).
FeasibleMTP_i2(m,t,p,eh) :- EscapeMTP(m,t,p), EnclosingEH(m,eh,p), FeasibleEH(m,eh).
FeasibleEH_i1(m,eh,v,h) :- CatchVH(v,h), VarEH(eh,v), OutermostEH(m,eh).
FeasibleEH_i2(m,eh,v,h,eh1) :- CatchVH(v,h), VarEH(eh,v), NestedEH(m,eh1,eh), FeasibleEH(m,eh1).


.include "relV.datalog"
.include "relH.datalog"
.include "HT.datalog"
.include "VarEH.datalog"
.include "ThrowPV.datalog"
.include "FinalEH.datalog"
.include "EscapeMTP.datalog"
.include "VHO.datalog"
.include "CallAt.datalog"
.include "ThrowMH.datalog"
.include "CatchVH.datalog"
.include "ExceptionType.datalog"
.include "entryPtM.datalog"
.include "LinkedEx.datalog"
.include "LinkMatch.datalog"
.include "ExceptionObj.datalog"
.include "WrapsEx.datalog"
.include "SharesFld.datalog"
.include "Escaping.datalog"
.include "Caught.datalog"
.include "NestedEH.datalog"
.include "OutermostEH.datalog"
.include "EnclosingEH.datalog"
.include "NoEnclose.datalog"
.include "FeasibleMTP.datalog"
.include "FeasibleEH.datalog"
