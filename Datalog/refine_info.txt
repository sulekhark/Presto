# TODO: In the notes below, the refinement is defined on tuples and rule instances. Technically,
# the refinement is on random variables and the bnet. That correction should be made.
# The refinement specification is on tuples and in datalog format for the sake of notational
# convenience and because there is a one-to-one mapping between tuples and random variables.
#
# Currently supported:
# We refine constraints involving a pair of EDB tuples, that might potentialy not be independent.
# Lets say, one EDB tuple (say, tuple1) is conditional on another EDB tuple (say, tuple2).
# Also, let the pair of rule instances in which tuple1 and tuple2 appear as antecedents be
# as follows:
#    rule1: conseq1 :- ..., tuple1, ...
#    rule2: conseq2 :- ..., conseq1, ..., tuple2, ...
# Then the refinement replaces the above two rules by the following two rules:
#    new_rule1: r_conseq1 :- ...., r_tuple1, ...
#    new_rule2: conseq2 :- ..., r_conseq1, ..., tuple2, ...
# Here, r_tuple1 is a new EDB tuple that represents tuple1 conditional on tuple2, and,
# r_conseq1 is a new IDB tuple that represents conseq1 conditional on tuple2.
#
# Necessary and sufficient condition on tuple1 and tuple2, to be able to apply the refinement:
# If tuple1 is an antecedent in some rule instance whose consequent is say, conseq1, then
# tuple2 and conseq1 must be antecedents in some rule instance.

CallAt CONDITIONAL_ON CallAt
RULE_A: CondCallAt(m1,p1,m2,p2,mcallee) :- CallAt(m2,p2,mcallee), CallAt(m1,p1,m2).
RULE_B: CondThrowMH(m1,p1,m2,h) :- ThrowMH(m2,h), CallAt(m1,p1,m2).
