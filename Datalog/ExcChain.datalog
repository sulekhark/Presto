.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "V.dom"                         # domain of variables
.include "I.dom"                         # domain of invoke statements
.include "EH.dom"                        # domain of exception handlers
.include "P.dom"                         # domain of program points
.include "H.dom"                         # domain of allocation sites 
.include "F.dom"                         # domain of fields
.include "Z.dom"                         # domain of integer indexes


relT(t:T) input
relM(m:M) input
relV(v:V) input
relI(i:I) input
relEH(eh:EH) input
relP(p:P) input
relH(h:H) input
relF(f:F) input
relZ(z:Z) input

ExceptionType(t:T) input                 # Type t is an exception type
sub(t:T,t1:T) input                      # Type t is a subtype of type t1
HasThrow(eh:EH,p:P) input                # Catch block eh contains throw statement p
MEH(m:M,eh:EH) input                     # Method m contains exception handler eh (exception handler and catch block: both are the same)
ThrowPV(m:M,p:P,v:V) input               # Instruction p of method m throws variable v
VarEH(eh:EH,v:V) input                   # Variable v is the variable of the catch block eh
VT(v:V,t:T) input                        # Variable v has type t.
HT(h:H,t:T) input
VCatchesH(v:V,h:H) input
VH(v:V,h:H) input
WrapsEx(h2:H,h1:H) input
HasMethInvk(eh:EH,i:I) input
MM(m1:M,m2:M) input
IM(i:I,m:M) input
MmethArg(m:M,z:Z,v:V) input
HFH(h1:H,f:F,h2:H) input

TaskFldInBuilder(t:T,f:F) input
IsMoveNextMeth(m:M) input
IsBuilderSetExceptionMeth(m:M) input
IsTaskResultMeth(m:M) input
IsTaskWaitMeth(m:M) input
IsTaskGetAwaiterMeth(m:M) input

MethSetsBuilder(m:M,v:V,eh:EH)
MethSetsBuilderInt(m:M,m1:M,v:V)
MethAwaitsTask(m:M,v:V)
ThrowReadsTask(p:P,v:V)
MethSetsTaskObj(m:M,h:H,eh:EH)
MethAwaitsTaskObj(m:M,h:H)
ThrowReadsTaskObj(p:P,h:H)
ThrowEH(eh:EH,m:M,v:V)
MVarEH(m:M,eh:EH,v:V)
TransSub(t1:T,t2:T)
ValidExType(v:V,t1:T)
CandidateMethPair(m1:M,m2:M,h:H,eh:EH)
CandidatePair(m1:M,eh:EH,m2:M,p:P)
ThrowExpl(m:M,v:V)
ThrowPt1(m:M,p:P,v:V)
ThrowPt2(m:M,p:P,v:V)
ThrowPt3(m:M,p:P,v:V)
ThrowPt4(m:M,p:P,v:V)
ThrowPt5(m:M,p:P,v:V)
ThrowPt6(m:M,p:P,v:V)
ThrowPt7(m:M,p:P,v:V)
ThrowUnion(m:M,p:P,v:V)
ThrowSubsumed(eh:EH,m:M,p:P,v:V)
ThrowAsync(eh:EH,m:M,p:P,v:V)

ThrowRemaining(m:M,p:P,v:V) printtuples
ThrowOrigin(m:M,p:P,v:V) printtuples
LinkedEx(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T) printtuples


# Rules

# Find "throw" statements within the lexical scope of a catch block
ThrowEH(eh,m,v) :- HasThrow(eh,p), MEH(m,eh), ThrowPV(m,p,v).

# Find links between a catch variable and a subsumed-throw variable such that 
# they have types t1 and t2 respectively, and it is potentially possible for
#   1) them to may point to the same exception object, or
#   2) them to may point to exception objects that may wrap one within the other.

MVarEH(m,eh,v) :- MEH(m,eh), VarEH(eh,v).
TransSub(t1,t2) :- sub(t1,t2), ExceptionType(t2), ExceptionType(t1).
TransSub(t1,t2) :- sub(t1,t), TransSub(t,t2), ExceptionType(t1).
ValidExType(v,t1) :- VT(v,t), TransSub(t1,t).
LinkedEx(m,v1,t1,m,v2,t2) :- MVarEH(m,eh,v1), ThrowEH(eh,m,v2), ValidExType(v1,t1), ValidExType(v2,t2).
ThrowSubsumed(eh,m,p,v) :- LinkedEx(m,v1,t1,m,v,t), ThrowPV(m,p,v), VarEH(eh,v1).

# Find links between a catch variable and a throw variable such that 
# they have types t1 and t2 respectively, and it is potentially possible for
#   1) them to may point to the same exception object, or
#   2) them to may point to exception objects that may wrap one within the other.
#   AND
#   3) the catch variable may point to an exception object that may be written to the "exception" field of a task object, and
#   4) the throw variable may point to an exception object that may be read from the "exception" field of the same task object, and
#   5) the catch block and the throw statement are in diffferent methods.
# In asynchronous programs, a catch variable and a throw variable linked this way pass an exception object via field write/read.

MethSetsBuilderInt(m,m1,v) :- IsMoveNextMeth(m), IsBuilderSetExceptionMeth(m1), MM(m,m1), MmethArg(m1,0,v).
MethSetsBuilder(m,v,eh) :- MethSetsBuilderInt(m,m1,v), HasMethInvk(eh,i), MEH(m,eh), IM(i,m1).
MethAwaitsTask(m,v) :- IsMoveNextMeth(m), IsTaskGetAwaiterMeth(m1), MM(m,m1), MmethArg(m1,0,v).
MethAwaitsTask(m,v) :- IsTaskWaitMeth(m1), MM(m,m1), MmethArg(m1,0,v).
ThrowReadsTask(p,v) :- IsTaskWaitMeth(m), MmethArg(m,0,v), ThrowPV(m,p,v1).
ThrowReadsTask(p,v) :- IsTaskResultMeth(m), MmethArg(m,0,v), ThrowPV(m,p,v1).

MethSetsTaskObj(m,h1,eh) :- MethSetsBuilder(m,v,eh), VH(v,h), HT(h,t), TaskFldInBuilder(t,f), HFH(h,f,h1).
MethAwaitsTaskObj(m,h) :- MethAwaitsTask(m,v), VH(v,h).
ThrowReadsTaskObj(p,h) :- ThrowReadsTask(p,v), VH(v,h).

CandidateMethPair(m1,m2,h,eh) :- MethSetsTaskObj(m1,h,eh), MethAwaitsTaskObj(m2,h).
CandidatePair(m1,eh,m2,p) :- CandidateMethPair(m1,m,h,eh), ThrowReadsTaskObj(p,h), ThrowPV(m2,p,v).
LinkedEx(m1,v1,t1,m2,v2,t2) :- CandidatePair(m1,eh,m2,p), VarEH(eh,v1), ThrowPV(m2,p,v2), ValidExType(v1,t1), ValidExType(v2,t2).
ThrowAsync(eh,m2,p,v2) :- LinkedEx(m1,v1,t1,m2,v2,t2), ThrowPV(m2,p,v2), VarEH(eh,v1).

# ThrowSubsumed and ThrowAsync contain the throw statements that may have further explanations.
# ThrowOrigin contains the throw statements that may be the program points in whose vicinity the exception object originates.
 
ThrowExpl(m,v) :- ThrowSubsumed(eh,m,p,v).
ThrowExpl(m,v) :- ThrowAsync(eh,m,p,v).
ThrowOrigin(m,p,v) :- ThrowPV(m,p,v), !ThrowExpl(m,v).


######################################################################################
# We need to compute this:
# ThrowRemaining - the throw statements for which we have no further explanation.
######################################################################################

ThrowPt1(m,p,v) :- ThrowOrigin(m,p,v).
ThrowPt2(m,p,v) :- ThrowSubsumed(eh,m,p,v), VH(v,h), WrapsEx(h,h1), VarEH(eh,ehv), VCatchesH(ehv,h1). # wrap and throw
ThrowPt3(m,p,v) :- ThrowSubsumed(eh,m,p,v), VH(v,h1), WrapsEx(h,h1), VarEH(eh,ehv), VCatchesH(ehv,h). # unwrap and throw
ThrowPt4(m,p,v) :- ThrowSubsumed(eh,m,p,v), VH(v,h), VarEH(eh,ehv), VCatchesH(ehv,h).  # rethrow
ThrowPt5(m,p,v) :- ThrowAsync(eh,m,p,v), VH(v,h), WrapsEx(h,h1), VarEH(eh,ehv), VCatchesH(ehv,h1). # wrap and throw
ThrowPt6(m,p,v) :- ThrowAsync(eh,m,p,v), VH(v,h1), WrapsEx(h,h1), VarEH(eh,ehv), VCatchesH(ehv,h). # unwrap and throw
ThrowPt7(m,p,v) :- ThrowAsync(eh,m,p,v), VH(v,h), VarEH(eh,ehv), VCatchesH(ehv,h).  # rethrow
ThrowUnion(m,p,v) :- ThrowPt1(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt2(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt3(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt4(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt5(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt6(m,p,v).
ThrowUnion(m,p,v) :- ThrowPt7(m,p,v).
ThrowRemaining(m,p,v) :- !ThrowUnion(m,p,v), ThrowPV(m,p,v).


.include "relT.datalog"
.include "relM.datalog"
.include "relV.datalog"
.include "relI.datalog"
.include "relEH.datalog"
.include "relP.datalog"
.include "relH.datalog"
.include "relF.datalog"
.include "relZ.datalog"
.include "ExceptionType.datalog"
.include "HasThrow.datalog"
.include "MEH.datalog"
.include "ThrowPV.datalog"
.include "VarEH.datalog"
.include "VT.datalog"
.include "sub.datalog"
.include "HT.datalog"
.include "VCatchesH.datalog"
.include "VH.datalog"
.include "WrapsEx.datalog"
.include "HasMethInvk.datalog"
.include "MM.datalog"
.include "IM.datalog"
.include "MmethArg.datalog"
.include "HFH.datalog"
.include "TaskFldInBuilder.datalog"
.include "IsMoveNextMeth.datalog"
.include "IsBuilderSetExceptionMeth.datalog"
.include "IsTaskResultMeth.datalog"
.include "IsTaskWaitMeth.datalog"
.include "IsTaskGetAwaiterMeth.datalog"
