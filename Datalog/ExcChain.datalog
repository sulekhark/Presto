.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "H.dom"                         # domain of allocation sites
.include "V.dom"                         # domain of variables
.include "I.dom"                         # domain of invoke statements
.include "EH.dom"                        # domain of exception handlers
.include "P.dom"                         # domain of program points
.include "F.dom"                         # domain of fields


relH(h:H) input
relT(t:T) input
ThrowMH(m:M,h:H) input                   # The exception object h escapes Method m.
CatchVH(v:V,h:H) input                   # Variable v which is the formal parameter of some catch handler, points-to exception object h.
ExceptionType(t:T) input                 # Type t is an exception type
HT(h:H,t:T) input                        # Allocation site h as Type t
IM(i:I,m:M) input                        # Invoke statement i may call method m

VHO(v:V,h:H)  input                      # Variable v may point to AllocSite h
FHO(f:F,h:H)  input                      # Static field f may point to AllocSite h
HFHO(h1:H,f:F,h2:H)  input               # Field f of object allocated at AllocSite h1 may point to AllocSite h2

HasThrow(eh:EH,p:P) input                # Catch block eh contains throw statement p
HasMethInvk(eh:EH,i:I) input             # Catch block eh contains the invoke statement i 
MM(m1:M,m2:M) input                      # Method m1 calls method m2
MEH(m:M,eh:EH) input                     # Method m contains exception handler eh (exception handler and catch block: both are the same)
ThrowPV(m:M,p:P,v:V) input               # Instruction p of method m throws variable v
VarEH(eh:EH,v:V) input                   # Variable v is the variable of the catch block eh
EscapeMTP(m:M,t:T,p:P) input             # Exception of type t if thrown at Program Point p, escapes Method m.

ExceptionObj(h:H)
TransLink(h1:H,h2:H)
WrapsEx(h1:H,h2:H)
SharesFld(h1:H,h2:H)
HasMeth(eh:EH,m:M)
ThrowEH(eh:EH,m:M,v:V)
TransCall(m1:M,m2:M)
Rethrown(v:V,h:H,m:M)
Nested(v:V,h1:H,m:M,h2:H)
Related(v:V,h1:H,m:M,h2:H)
EscapingThrow(m:M,p:P,v:V)

ThrowMHR(m:M,h:H) printtuples 
CatchVHR(v:V,h:H) printtuples
NewThrowMH(m:M,h:H) printtuples

# Rules

# Step 1: Find pairs of exception objects (h1,h2) where either:
#  1) h1 wraps (encapsulates) h2, or
#  2) both h1 and h2 point (transitively) to some common object h
# Note: When we transitively compute the above, we don't follow links
# that are exception objects because we want to find only the "nearest" 
# exception objects for which either of the above relations hold.

ExceptionObj(h) :- VHO(v,h), HT(h,t), ExceptionType(t).
ExceptionObj(h) :- FHO(f,h), HT(h,t), ExceptionType(t).
ExceptionObj(h) :- HFHO(h1,f,h), HT(h,t), ExceptionType(t).

TransLink(h1,h2) :- HFHO(h1,f1,h), HFHO(h,f2,h2), !ExceptionObj(h).
TransLink(h1,h2) :- HFHO(h1,f,h), TransLink(h,h2), !ExceptionObj(h).
WrapsEx(h1,h2) :- ExceptionObj(h1), ExceptionObj(h2), TransLink(h1,h2).
SharesFld(h1,h2) :- TransLink(h1,h), TransLink(h2,h), ExceptionObj(h1), ExceptionObj(h2), !ExceptionObj(h).

# Step 2: Find "throw" statements within the (interprocedural) scope of a catch block

HasMeth(eh,m) :- HasMethInvk(eh,i), IM(i,m).
EscapingThrow(m,p,v) :- ThrowPV(m,p,v), VHO(v,h), HT(h,t), EscapeMTP(m,t,p).
ThrowEH(eh,m,v) :- HasThrow(eh,p), MEH(m,eh), EscapingThrow(m,p,v).
TransCall(m1,m2) :- HasMeth(eh,m1), MM(m1,m2).
TransCall(m1,m3) :- TransCall(m1,m2), MM(m2,m3).
ThrowEH(eh,m,v) :- HasMeth(eh,m), EscapingThrow(m,p,v). 
ThrowEH(eh,m,v) :- HasMeth(eh,m1), TransCall(m1,m), EscapingThrow(m,p,v). 

# Step 3: Find if a catch variable and a subsumed-throw variable point to the same
#         exception object or,
#         if they point to h1 and h2,
#         then find if either WrapsEx(h1,h2) or SharesFld(h1,h2) hold.

ThrowMHR(m,h) :- ThrowMH(m,h).
Rethrown(v1,h,m) :- VarEH(eh,v1), VHO(v1,h), ExceptionObj(h), ThrowEH(eh,m,v2), VHO(v2,h).
ThrowMHR(m,h) :- CatchVH(v,h), Rethrown(v,h,m).
Nested(v1,h1,m,h2) :- VarEH(eh,v1), VHO(v1,h1), ThrowEH(eh,m,v2), VHO(v2,h2), WrapsEx(h1,h2).
ThrowMHR(m,h2) :- CatchVH(v,h1), Nested(v,h1,m,h2).
Related(v1,h1,m,h2) :- VarEH(eh,v1), VHO(v1,h1), ThrowEH(eh,m,v2), VHO(v2,h2), SharesFld(h1,h2).
ThrowMHR(m,h2) :- CatchVH(v,h1), Related(v,h1,m,h2).
CatchVHR(v,h) :- CatchVH(v,h).
 
# Below rule only present for debugging
NewThrowMH(m,h) :- ThrowMHR(m,h), !ThrowMH(m,h).


.include "relH.datalog"
.include "relT.datalog"
.include "ThrowMH.datalog"
.include "CatchVH.datalog"
.include "ExceptionType.datalog"
.include "HT.datalog"
.include "IM.datalog"
.include "VHO.datalog"
.include "FHO.datalog"
.include "HFHO.datalog"
.include "HasThrow.datalog"
.include "HasMethInvk.datalog"
.include "MM.datalog"
.include "MEH.datalog"
.include "ThrowPV.datalog"
.include "VarEH.datalog"
.include "EscapeMTP.datalog"

