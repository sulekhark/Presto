.include "T.dom"                         # domain of types
.include "M.dom"                         # domain of methods
.include "V.dom"                         # domain of variables
.include "I.dom"                         # domain of invoke statements
.include "EH.dom"                        # domain of exception handlers
.include "P.dom"                         # domain of program points


relT(t:T) input
ExceptionType(t:T) input                 # Type t is an exception type
IM(i:I,m:M) input                        # Invoke statement i may call method m
sub(t:T,t1:T) input                      # Type t is a subtype of type t1

HasThrow(eh:EH,p:P) input                # Catch block eh contains throw statement p
HasMethInvk(eh:EH,i:I) input             # Catch block eh contains the invoke statement i 
MM(m1:M,m2:M) input                      # Method m1 calls method m2
MEH(m:M,eh:EH) input                     # Method m contains exception handler eh (exception handler and catch block: both are the same)
ThrowPV(m:M,p:P,v:V) input               # Instruction p of method m throws variable v
VarEH(eh:EH,v:V) input                   # Variable v is the variable of the catch block eh
EscapeMTP(m:M,t:T,p:P) input             # Exception of type t if thrown at Program Point p, escapes Method m.
VT(v:V,t:T) input                        # Variable v has type t.
NoEnclose(m:M,p:P) input

HasMeth(eh:EH,m:M)
EscapingThrow(m:M,p:P,v:V)
ThrowEH(eh:EH,m:M,v:V)
TransCall(m1:M,m2:M)
MVarEH(m:M,eh:EH,v:V)
TransSub(t1:T,t2:T)
ValidExType(v:V,t1:T)
TransM(m:M)
NoEncloseM(m:M)
LinkedThrow(m:M,v:V)
ThrowOrigin(m:M,p:P,v:V) printtuples
LinkedEx(m1:M,v1:V,t1:T,m2:M,v2:V,t2:T) printtuples


# Rules

# Find "throw" statements within the (interprocedural) scope of a catch block

HasMeth(eh,m) :- HasMethInvk(eh,i), IM(i,m).
EscapingThrow(m,p,v) :- ThrowPV(m,p,v), EscapeMTP(m,t,p).
ThrowEH(eh,m,v) :- HasThrow(eh,p), MEH(m,eh), ThrowPV(m,p,v).
TransCall(m1,m2) :- HasMeth(eh,m1), MM(m1,m2).
TransCall(m1,m3) :- TransCall(m1,m2), MM(m2,m3).
ThrowEH(eh,m,v) :- HasMeth(eh,m), EscapingThrow(m,p,v). 
ThrowEH(eh,m,v) :- HasMeth(eh,m1), TransCall(m1,m), EscapingThrow(m,p,v). 

# Find links between a catch variable and a subsumed-throw variable such that 
# they have types t1 and t2 respectively, and it is potentially possible for
#   1) them to point to the same exception object, or
#   2) them to point to exception objects that wrap one within the other.

MVarEH(m,eh,v) :- MEH(m,eh), VarEH(eh,v).
TransSub(t1,t2) :- sub(t1,t2), ExceptionType(t2), ExceptionType(t1).
TransSub(t1,t2) :- sub(t1,t), TransSub(t,t2), ExceptionType(t1).
ValidExType(v,t1) :- VT(v,t), TransSub(t1,t).
LinkedEx(m1,v1,t1,m2,v2,t2) :- MVarEH(m1,eh,v1), ThrowEH(eh,m2,v2), ValidExType(v1,t1), ValidExType(v2,t2).

TransM(m) :- HasMeth(eh,m).
TransM(m) :- TransCall(m1,m).
NoEncloseM(m) :- !TransM(m).
ThrowOrigin(m,p,v) :- ThrowPV(m,p,v), NoEnclose(m,p), NoEncloseM(m).

LinkedThrow(m,v) :- LinkedEx(m1,v1,t1,m,v,t).
ThrowOrigin(m,p,v) :- ThrowPV(m,p,v), !LinkedThrow(m,v).

.include "relT.datalog"
.include "ExceptionType.datalog"
.include "IM.datalog"
.include "HasThrow.datalog"
.include "HasMethInvk.datalog"
.include "MM.datalog"
.include "MEH.datalog"
.include "ThrowPV.datalog"
.include "VarEH.datalog"
.include "EscapeMTP.datalog"
.include "VT.datalog"
.include "sub.datalog"
.include "NoEnclose.datalog"
