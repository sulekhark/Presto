.include "T.dom"                         # domain of types
.include "F.dom"                         # domain of fields
.include "M.dom"                         # domain of methods
.include "I.dom"                         # domain of invoke statements
.include "H.dom"                         # domain of allocation sites
.include "V.dom"                         # domain of variables
.include "Z.dom"                         # domain of integer indexes
.include "X.dom"                         # domain of addresses for all objects, fields of objects and structs whose address can be taken.
.include "P.dom"                         # domain of program points
.include "EH.dom"                        # domain of exception handlers

###
# Relations
###

relV(v:V) input
relH(h:H) input
HT(h:H,t:T) input                        # Allocation site h allocates an object of Type t
MI(m:M,i:I) input                        # Method m contains InvokeStmt i
VarEH(eh:EH,v:V)  input                  # ExceptionHandler eh has the formal paramter as Variable v
ThrowPV(m:M,p:P,v:V)  input              # Instruction p of Method m throws Variable v
PI(p:P,i:I) input                        # Connects program points that are invoke statements to corresponding entries in domI

MmethArg(m:M,n:Z,v:V) input              # Variable v is the nth parameter of Method m
MmethRet(m:M,n:Z,v:V) input              # Variable v is returned from Method m (n is always 0 - not used).
IinvkArg0(i:I,v:V) input                 # Variable v is the receiver of the method call in the InvokeStmt i
IinvkArg(i:I,n:Z,v:V) input              # Variable v is the nth argument of the method call in the InvokeStmt i
IinvkRet(i:I,n:Z,v:V) input              # Variable v is the lhs of InvokeStmt i (n is always 0 - not used)

AddrOfMX(m:M,x:X) input                  # Method m has Address x
AddrOfHFX(h:H,f:F,x:X) input             # The Field f of the abstract object allocated at AllocSite h has Address x
AddrOfVX(v:V,x:X) input                  # Variable v has Address x
AddrOfFX(f:F,x:X) input                  # Static field f has Address x

MAlloc(m:M,l:V,h:H) input                # Method m contains stmt: l = new ... (alloc site h)
MMove(m:M,l:V,r:V) input                 # Method m contains: l = r
MInstFldRead(m:M,l:V,r:V,f:F) input      # Method m contains: l = r.f
MInstFldWrite(m:M,l:V,f:F,r:V) input     # Method m contains: l.f = r
MStatFldRead(m:M,l:V,f:F) input          # Method m contains: l = f
MStatFldWrite(m:M,f:F,r:V) input         # Method m contains: f = r

MAddrTakenLocal(m:M,l:V,r:V) input       # Method m contains l = &r
MAddrTakenInstFld(m:M,l:V,r:V,f:F) input # Method m contains l = &r.f
MAddrTakenStatFld(m:M,l:V,f:F) input     # Method m contains l = &f
MAddrTakenFunc(m1:M,l:V,m2:M)            # Method m1 contains l = &m2, where m2 is a method.

MDerefLeft(m:M,l:V,r:V) input            # Method m contains *l = r
MDerefRight(m:M,l:V,r:V) input           # Method m contains l = *r

structV(v:V) input                       # Local variable v is of type struct
structRefV(v:V) input                    # Local variable v is of type reference to struct
thisRefV(v:V) input                      # "this" argument is passed by reference. Ex: foo(ref v)
structH(h:H) input                       # Heap element h is of type struct

IM(i:I,m:M) input                        # InvokeStmt i may call Method m
reachableM(m:M) input                    # Methods reachable from Main method or entry point methods
FinalEH(eh:EH,t:T,p:P) input             # ExceptionHandler eh catches an exception of Type t thrown at Program point p.
EscapeMTP(m:M,t:T,p:P) input             # Exception of type t if thrown at Program Point p, escapes Method m.

# Below six relations are "input" points-to relations 
VH(v:V,h:H)  input                       # Variable v may point to AllocSite h
VX(v:V,x:X)  input                       # Variable v may point to Address x
FH(f:F,h:H)  input                       # Static field f may point to AllocSite h
FX(f:F,x:X)  input                       # Static field f may point to Address x
HFH(h1:H,f:F,h2:H)  input                # Field f of object allocated at AllocSite h1 may point to AllocSite h2
HFX(h:H,f:F,x:X)  input                  # Field f of object allocated at AllocSite h may point to Address x

# Below six relations are the "output" points-to relations which are supersets of the corresponding input relations 
VHO(v:V,h:H)  printtuples                # Variable v may point to AllocSite h
VXO(v:V,x:X)  printtuples                # Variable v may point to Address x
FHO(f:F,h:H)  printtuples                # Static field f may point to AllocSite h
FXO(f:F,x:X)  printtuples                # Static field f may point to Address x
HFHO(h1:H,f:F,h2:H)  printtuples         # Field f of object allocated at AllocSite h1 may point to AllocSite h2
HFXO(h:H,f:F,x:X)  printtuples           # Field f of object allocated at AllocSite h may point to Address x

thisIVH(i:I,v:V,h:H) printtuples         # Invoke statement i has reference variable v as the "this" variable && v points-to h

Alloc(l:V,h:H) printtuples
Move(l:V,r:V) printtuples
InstFldRead(l:V,h:H,f:F) printtuples
InstFldWrite(h:H,f:F,r:V) printtuples
StatFldRead(l:V,f:F) printtuples
StatFldWrite(f:F,r:V) printtuples

StrMove(lh:H,rh:H) printtuples
CallAt(m:M,p:P,mcallee:M) printtuples

AddrTakenLocal(l:V,r:V) printtuples
AddrTakenInstFld(l:V,r:V,f:F) printtuples
AddrTakenStatFld(l:V,f:F) printtuples
AddrTakenFunc(l:V,m:M) printtuples
DerefLeft(l:V,r:V) printtuples
DerefRight(l:V,r:V) printtuples

ThrowMH(m:M,h:H) printtuples             # The exception object h escapes Method m.
CatchVH(v:V,h:H) printtuples             # Variable v which is the formal parameter of some catch handler, points-to exception object h.



###
# Constraints
###

VHO(v,h) :- VH(v,h).
VXO(v,x) :- VX(v,x).
FHO(f,h) :- FH(f,h).
FXO(f,x) :- FX(f,x).
HFHO(h1,f,h2) :- HFH(h1,f,h2).
HFXO(h,f,x) :- HFX(h,f,x). 

thisIVH(i,v,h) :- IinvkArg0(i,v), VXO(v,x), AddrOfVX(v1,x), VHO(v1,h).
thisIVH(i,v,h) :- IinvkArg0(i,v), VXO(v,x), AddrOfHFX(h1,f,x), HFHO(h1,f,h).
thisIVH(i,v,h) :- IinvkArg0(i,v), VXO(v,x), AddrOfFX(f1,x), FHO(f1,h).

# arguments and return variables
VHO(v,h) :- IM(i,m), thisIVH(i,u,h), MmethArg(m,0,v), thisRefV(u), !structRefV(u).
Move(v,u) :- IinvkArg(i,z,u), IM(i,m), MmethArg(m,z,v), thisRefV(u), structRefV(u).
Move(v,u) :- IinvkArg(i,z,u), IM(i,m), MmethArg(m,z,v), !thisRefV(u).
Move(u,v) :- IinvkRet(i,z,u), IM(i,m), MmethRet(m,z,v).

Alloc(l,h)   :- reachableM(m), MAlloc(m,l,h).
Move(l,r)   :- reachableM(m), MMove(m,l,r).
InstFldRead(l,h,f) :- reachableM(m), MInstFldRead(m,l,r,f), VHO(r,h).
InstFldRead(l,h,f) :- reachableM(m), MInstFldRead(m,l,r,f), VXO(r,x), AddrOfHFX(h,f,x).
InstFldWrite(h,f,r) :- reachableM(m), MInstFldWrite(m,l,f,r), VHO(l,h).
InstFldWrite(h,f,r) :- reachableM(m), MInstFldWrite(m,l,f,r), VXO(l,x), AddrOfHFX(h,f,x).
StatFldRead(l,f)   :- reachableM(m), MStatFldRead(m,l,f).
StatFldWrite(f,r)   :- reachableM(m), MStatFldWrite(m,f,r).

AddrTakenLocal(l,r) :- reachableM(m), MAddrTakenLocal(m,l,r).
AddrTakenInstFld(l,r,f) :- reachableM(m), MAddrTakenInstFld(m,l,r,f).
AddrTakenStatFld(l,f) :- reachableM(m), MAddrTakenStatFld(m,l,f).
AddrTakenFunc(l,m2) :- reachableM(m1), MAddrTakenFunc(m1,l,m2).
DerefLeft(l,r) :- reachableM(m), MDerefLeft(m,l,r).
DerefRight(l,r) :- reachableM(m), MDerefRight(m,l,r).

VHO(l,h) :- Alloc(l,h).

VHO(l,h) :- Move(l,r), VHO(r,h), !structV(l).
StrMove(lh,rh) :- Move(l,r), VHO(l,lh), VHO(r,rh), structV(l).
VXO(l,x) :- Move(l,r), VXO(r,x).

VHO(l,hfh) :- InstFldRead(l,h,f), HFHO(h,f,hfh), !structV(l).
StrMove(lh,hfh) :- InstFldRead(l,h,f), VHO(l,lh), HFHO(h,f,hfh), structV(l).
VXO(l,x) :- InstFldRead(l,h,f), HFXO(h,f,x).

HFHO(h,f,rh) :- InstFldWrite(h,f,r), VHO(r,rh), !structV(r).
StrMove(hfh,rh) :- InstFldWrite(h,f,r), HFHO(h,f,hfh), VHO(r,rh), structV(r).
HFXO(h,f,x) :- InstFldWrite(h,f,r), VXO(r,x).

VHO(l,h) :- StatFldRead(l,f), FHO(f,h), !structV(l).
StrMove(lh,fh) :- StatFldRead(l,f), VHO(l,lh), FHO(f,fh), structV(l).
VXO(l,x) :- StatFldRead(l,f), FXO(f,x).

FHO(f,h) :- StatFldWrite(f,r), VHO(r,h), !structV(r).
StrMove(fh,rh) :- StatFldWrite(f,r), FHO(f,fh), VHO(r,rh), structV(r).
FXO(f,x) :- StatFldWrite(f,r), VXO(r,x).


# handling structs
StrMove(lhfh,rhfh) :- StrMove(lh,rh), HFHO(lh,f, lhfh), HFHO(rh,f,rhfh), structH(lhfh), structH(rhfh).
HFHO(lh,f,rhfh) :- StrMove(lh,rh), !structH(rhfh), HFHO(rh,f,rhfh).


# Handling & operator
# v1 = &v2, v1 = &v2.f, v1 = &f, v1 = &m
VXO(v1,x) :- AddrTakenLocal(v1,v2), AddrOfVX(v2,x), !structV(v2).
VHO(v1,h) :- AddrTakenLocal(v1,v2), VHO(v2,h), structV(v2).
VXO(v1,x) :- AddrTakenInstFld(v1,v2,f), VHO(v2,h2), AddrOfHFX(h2,f,x), !structRefV(v1).
VHO(v1,h) :- AddrTakenInstFld(v1,v2,f), VHO(v2,h2), HFHO(h2,f,h), structRefV(v1).
VXO(v1,x) :- AddrTakenStatFld(v1,f), AddrOfFX(f,x), !structRefV(v1).
VHO(v1,h) :- AddrTakenStatFld(v1,f), FHO(f,h), structRefV(v1).
VXO(v1,x) :- AddrTakenFunc(v1,m), AddrOfMX(m,x).

# Handling dereference
# *l = r
Move(v,r) :- DerefLeft(l,r), VXO(l,x), AddrOfVX(v,x).
InstFldWrite(h,f,r) :- DerefLeft(l,r), VXO(l,x), AddrOfHFX(h,f,x).
StatFldWrite(f,r) :- DerefLeft(l,r), VXO(l,x), AddrOfFX(f,x).

# l = *r
Move(l,v) :- DerefRight(l,r), VXO(r,x), AddrOfVX(v,x).
InstFldRead(l,h,f) :- DerefRight(l,r), VXO(r,x), AddrOfHFX(h,f,x).
StatFldRead(l,f) :- DerefRight(l,r), VXO(r,x), AddrOfFX(f,x).

# Propagating exception points-to
CallAt(m,p,mcallee) :- MI(m,i), IM(i,mcallee), PI(p,i).
ThrowMH(m,h) :- ThrowPV(m,p,v), VHO(v,h), HT(h,t), EscapeMTP(m,t,p).
ThrowMH(m,h) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), EscapeMTP(m,t,p).
CatchVH(ehv,h) :- ThrowPV(m,p,v), VHO(v,h), HT(h,t), FinalEH(eh,t,p), VarEH(eh,ehv).
CatchVH(v,h) :- CallAt(m,p,mcallee), ThrowMH(mcallee,h), HT(h,t), FinalEH(eh,t,p), VarEH(eh,v).
VHO(v,h) :- CatchVH(v,h).



.include "relV.datalog"
.include "relH.datalog"
.include "HT.datalog"
.include "MI.datalog"
.include "VarEH.datalog"
.include "ThrowPV.datalog"
.include "IinvkArg.datalog"
.include "IinvkArg0.datalog"
.include "IinvkRet.datalog"
.include "MAlloc.datalog"
.include "MInstFldRead.datalog"
.include "MInstFldWrite.datalog"
.include "MmethArg.datalog"
.include "MmethRet.datalog"
.include "MMove.datalog"
.include "MStatFldRead.datalog"
.include "MStatFldWrite.datalog"
.include "AddrOfFX.datalog"
.include "AddrOfHFX.datalog"
.include "AddrOfMX.datalog"
.include "AddrOfVX.datalog"
.include "MAddrTakenFunc.datalog"
.include "MAddrTakenInstFld.datalog"
.include "MAddrTakenLocal.datalog"
.include "MAddrTakenStatFld.datalog"
.include "MDerefLeft.datalog"
.include "MDerefRight.datalog"
.include "structH.datalog"
.include "structV.datalog"
.include "IM.datalog"
.include "reachableM.datalog"
.include "VH.datalog"
.include "VX.datalog"
.include "FH.datalog"
.include "FX.datalog"
.include "HFH.datalog"
.include "HFX.datalog"
.include "PI.datalog"
.include "FinalEH.datalog"
.include "EscapeMTP.datalog"
